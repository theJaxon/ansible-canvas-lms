---
# tasks file for canvas
# https://github.com/instructure/canvas-lms/wiki/Production-Start#canvas-ownership
- name: Add canvasuser 
  user:
    name: canvasuser 
    password: '*' # disabled password https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html#parameter-password
    comment: canvas

- name: Check if canvas dir is present
  stat:
    path: "{{ canvas_dir }}"
  register: canvas_dir_var
  tags: pre_req

- name: Create canvas dir if not present 
  file:
    path: "{{ canvas_dir }}"
    state: directory 
  when: not canvas_dir_var.stat.exists
  tags: pre_req

- name: Change permissions for /var/canvas 
  command: "chown -R {{ username }}:{{ username }} {{ canvas_dir }}"
  args:
    warn: false
  tags: pre_req

- name: Check if canvas tar already exists 
  stat: 
    path: "{{ canvas_tar }}"
  register: canvas_tar_var
  tags: pre_req

- name: Download canvas tar file if not present 
  become_user: "{{ username }}" 
  get_url:
    url: "{{ canvas_url }}"
    dest: "{{ canvas_tar }}"
  when: not canvas_tar_var.stat.exists
  tags: pre_req

- name: Extract canvas tar file 
  become_user: "{{ username }}"
  unarchive:
    src: "{{ canvas_tar }}"
    dest: "{{ canvas_dir }}"
    remote_src: True 
    extra_opts: [--strip-components=1] # Extract without the parent directory
  tags: pre_req

- name: Add ruby repository 
  apt_repository:
    repo: "{{ ruby_repo }}"
    update_cache: True 
  tags: pre_req
  
- name: Install Ruby 
  apt:
    name: "{{ ruby_dependencies }}"
    state: present 
  tags: pre_req

- name: Add node and yarn repos 
  copy:
    content: "{{ item.content }}"
    dest: "{{ item.dest }}"
  loop: "{{ repos }}"
  tags: pre_req

- name: Add nodeJS and yarn keys 
  apt_key:
    url: "{{ item.key }}"
  loop: "{{ repos }}"
  tags: pre_req

- name: Add redis server repo
  apt_repository:
    repo: "{{ redis_ppa }}"
  tags: pre_req

- name: Update cache and install nodeJS and yarn 
  apt:
    name: "{{ item.name }}"
    update_cache: True 
  loop: "{{ repos }}"
  tags: pre_req

- name: Install required gems  
  gem:
    name: "{{ item.name }}" 
    version: "{{ item.version }}"
    state: present
    user_install: False 
  loop: "{{ gems }}"
  tags: pre_req

# Needs sudo
- name: Run bundle install 
  become_user: "{{ username }}"
  command: bundle _2.1.4_ install --path vendor/bundle
  args:
    chdir: "{{ canvas_dir }}"
  tags: pre_req

- name: Fix json not being installed with bundler 
  become_user: "{{ username }}"
  command: bundle package
  args:
    chdir: "{{ canvas_dir }}"

- name: Install node modules from package.json
  become_user: "{{ username }}"
  yarn:
    path: "{{ canvas_dir }}"
  tags: pre_req

# https://github.com/instructure/canvas-lms/wiki/Production-Start#canvas-default-configuration
- name: copy canvas default configuration files and configure dynamic settings 
  copy:
    src: "{{ canvas_dir }}/config/{{ item }}.yml.example"
    dest: "{{ canvas_dir }}/config/{{ item }}.yml"
    remote_src: True 
  loop: "{{ default_config_files }}"
  tags: config

# https://github.com/instructure/canvas-lms/wiki/Production-Start#database-configuration
# https://github.com/instructure/canvas-lms/wiki/Production-Start#outgoing-mail-configuration
# https://github.com/instructure/canvas-lms/wiki/Production-Start#url-configuration
# https://github.com/instructure/canvas-lms/wiki/Production-Start#security-configuration
- name: copy configuration files 
  template:
    src: "{{ item }}.j2"
    dest: "{{ canvas_dir }}/config/{{ item }}.yml"
  loop: "{{ config_files }}"
  tags: config

# https://github.com/instructure/canvas-lms/wiki/Production-Start#generate-assets
- name: Generate Assets [Directories]
  become_user: "{{ username }}"
  file:
    state: directory
    dest: "{{ canvas_dir }}/{{ item }}"
  loop: "{{ assets_dirs }}"
  tags: config

- name: Generate Assets [files]
  become_user: "{{ username }}"
  file:
    state: touch 
    dest: "{{ canvas_dir }}/{{ item }}"
  loop: "{{ assets_files }}"
  tags: config

- name: Run yarn install again 
  become_user: "{{ username }}"
  yarn:
    path: "{{ canvas_dir }}"
  tags: config

- name: Compile assets (This takes a very long time)
  become_user: "{{ username }}"
  shell: RAILS_ENV=production bundle exec rake canvas:compile_assets
  args:
    chdir: "{{ canvas_dir }}"
  tags: rake 

# This section is added in case you manually want to execute the command, it's not recommended.
# - name: Add env variables 
#   blockinfile:
#     block: |
#       export CANVAS_LMS_ADMIN_EMAIL="{{ canvas_server_admin }}"
#       export CANVAS_LMS_ADMIN_PASSWORD="{{ postgres_password }}"
#       export CANVAS_LMS_ACCOUNT_NAME="{{ postgres_username }}"
#       export CANVAS_LMS_STATS_COLLECTION="opt_out"
#     dest: "/home/{{ username }}/.bashrc"
#   tags: rake


# Database Population
# https://github.com/instructure/canvas-lms/wiki/Production-Start#database-population
- name: Populate DB 
  become_user: "{{ username }}"
  shell: RAILS_ENV=production bundle exec rake db:initial_setup
  args:
    chdir: "{{ canvas_dir }}"
  environment: 
    - CANVAS_LMS_ADMIN_EMAIL: "{{ canvas_server_admin }}"
    - CANVAS_LMS_ADMIN_PASSWORD: "{{ postgres_password }}"
    - CANVAS_LMS_ACCOUNT_NAME: "{{ postgres_username }}"
    - CANVAS_LMS_STATS_COLLECTION: "opt_out"
    #- PATH: "{{ ansible_env.PATH }}:/home/vagrant/.gem/ruby/2.6.0/bin/"
  tags: rake

- name: Change ownership for assets
  command: > 
    chown -R canvasuser config/environment.rb log tmp public/assets
    app/stylesheets/_brandable_variables_defaults_autogenerated.scss
    app/stylesheets/brandable_css_brands Gemfile.lock config.ru
  args:
    chdir: "{{ canvas_dir }}"
    warn: False
  tags:
  - part_2  
  - assets

- name: Change ownership for generated file 
  command: "chown -R canvasuser {{ canvas_dir }}/public/dist/brandable_css"
  args:
    warn: False

# Passenger installation 
# https://www.phusionpassenger.com/library/install/apache/install/oss/bionic/#step-1:-install-passenger-packages
- name: Add passenger key
  apt_key:
    keyserver: "{{ item.keyserver }}"
    id: "{{ item.key_id }}"
  loop: "{{ passenger }}"
  tags: passenger 

- name: Add passenger repo 
  copy:
    content: deb https://oss-binaries.phusionpassenger.com/apt/passenger bionic main
    dest: "{{ repo_dir }}/passenger.list"
  tags: passenger 

- name: Update cache and install apaceh, passenger and passenger apache module 
  apt:
    name: "{{ item }}"
    update_cache: True 
  loop:
  - passenger 
  - apache2
  - libapache2-mod-passenger
  tags: passenger 
    
# https://www.phusionpassenger.com/library/install/apache/install/oss/bionic/#step-2:-enable-the-passenger-apache-module-and-restart-apache
- name: Enable the passenger apache module and restart apache 
  apache2_module:
    name: "{{ item }}"
    state: present 
  loop: 
  - passenger 
  - rewrite
  - ssl 
  tags: passenger 

- name: Remove symlink for default configured site 
  file: 
    path: /etc/apache2/sites-enabled/000-default.conf 
    state: absent
  tags: apache

- name: Create canvas.conf file 
  template:
    src: canvas.j2
    dest: /etc/apache2/sites-available/canvas.conf
  tags: apache

- name: Enable canvas configuration 
  command: "a2ensite canvas"
  tags: apache

- name: Install remaining packages 
  apt:
    name: "{{ remaining_packages }}"

- name: Copy redis config files
  template:
    src: "{{ item }}.j2"
    dest: "{{ canvas_dir }}/config/{{ item }}.yml"
  loop: "{{ redis_config_files }}"
  tags: redis 

- name: Change ownership and permissions for redis files 
  command: "chown canvasuser {{ canvas_dir }}/config/{{ item }}.yml"
  args:
    warn: false
  loop: "{{ redis_config_files }}"
  tags: redis 

- name: Change mode for cache_store file 
  command: "chmod 400 {{ canvas_dir }}/config/{{ item }}.yml"
  args:
    warn: false  
  loop: "{{ redis_config_files }}"
  tags: redis 

- name: Automated jobs symlink 
  file: 
    state: link 
    src: "{{ canvas_dir }}/script/canvas_init"
    dest: /etc/init.d/canvas_init

- name: Run commands for automated jobs 
  command: "{{ item }}"
  args:
    chdir: "{{ canvas_dir }}"
  loop:
  - "update-rc.d canvas_init defaults"
  - "/etc/init.d/canvas_init start"

- name: Restart apache2 
  command: /etc/init.d/apache2 restart